package com.cha.transcoder.demon;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.apache.log4j.Logger;

import com.cha.transcoder.common.TcUtil;
import com.cha.transcoder.monitor.dao.MonitorDAO;
import com.cha.transcoder.nps.SoapManager;

public class TransferProcessor extends GeneralProcessor implements Runnable, TcConstant {

	private Logger log = Logger.getLogger(MergeProcessor.class);

	private String job_id;
	private String file_path;
	private String file_type;
	private String file_name;
	private String job_option;
	private String target_directory;

	public TransferProcessor() {
	}

	public void setPara(String j_id, String file_path, String file_type, String file_name, String job_option, String target_directory) {
		this.job_id = j_id;
		this.file_path = file_path;
		this.file_type = file_type;
		this.file_name = file_name;
		this.job_option = job_option;
		this.target_directory = target_directory;
	}

	public void run() {
		// 에러가 났을때 메시지를 저장했다가, metadat에 넣어준다.
		String errMsg = "";

		try {
			// CMD에서 읽어온 문자열을 저장한다.
			String line = "";

			// 진행률을 계산하기위해 개별소재의 duration을 모두 합한 값.
			int t_progress = 0;
			StringBuffer bMetadata = new StringBuffer();

			// Duration & Metadata를 Update 한다.
			Map<String, Object> up_params = new HashMap();
			up_params.put("j_id", job_id);
			//String duration = TcUtil.toTime(t_progress);
			//up_params.put("duration", duration);
			up_params.put("metadata", bMetadata.toString());

			MonitorDAO monitorDAO = MonitorDAO.getInstance();
			monitorDAO.update("monitor.updateMetadata", up_params);

			// ----------------------------------------------------------------------------
			// File을 Storage로 복사한다.
			// ----------------------------------------------------------------------------
			boolean isError = false;
			File source = new File(file_path);
			FileInputStream is = new FileInputStream(source);

			log.debug("Source=" + source.getAbsolutePath());
			log.debug("target_directory=" + target_directory);
			log.debug("file_name=" + file_name);

			makeDirectory(target_directory);

			File target = new File(target_directory + File.separatorChar + file_name);
			FileOutputStream os = new FileOutputStream(target);

			log.debug("absolute path of target=" + target.getAbsolutePath());

			int len = 5 * 1024 * 1024;
			long offset = 0;
			int percent = 0;
			long file_length = source.length();

			byte[] buf = null;
			while (offset != file_length) {
				if (offset + len < file_length) {
					buf = new byte[len];
				} else {
					buf = new byte[(int) (file_length - offset)];
				}

				is.read(buf);
				os.write(buf);
				offset += buf.length;

				int tmpPercent = (int) ((float) (offset * 100 / file_length));

				Thread.sleep(WAITING_TIME_FOR_INTERRUPT);

				if (percent != tmpPercent) {
					percent = tmpPercent;

					Map<String, Object> params = new HashMap();
					params.put("j_id", job_id);
					//params.put("job_starttime", TcUtil.getCurrentTime()); // 진행중엔 표시할 필요 없음.
					params.put("job_status", "Inprogress");
					params.put("job_progress", Integer.toString(percent));
					monitorDAO.update("monitor.updateJobInprogress", params);

					if (percent == 100) {
						log.debug("transfer completed.");
					} else {
						log.debug("job_id=" + job_id + ", " + percent + "% transferred.");
					}
				}
			}

			os.close();
			is.close();
			// ----------------------------------------------------------------------------

			if (isError) {
				// 전송 하다가 에러난 경우
				log.error("job_id=" + job_id + " Failed");
				//brCleanUp.close();
			} else {

				MediaFileInfo meta = getMetadata(target);

				// 작업완료 된 경우
				Map<String, Object> params = new HashMap();
				params.put("j_id", job_id);
				params.put("file_size", Long.toString(target.length()));

				// 파일사이즈를 업데이트한다.
				monitorDAO.update("monitor.updateFileSize", params);

				params.put("duration", meta.getDuration());
				params.put("metadata", meta.getMetatdata());

				// 영상길이와 메타데이터를 업데이트 한다.
				monitorDAO.update("monitor.updateMetadata", params);

				params.put("job_endtime", TcUtil.getCurrentTime());
				params.put("job_status", "Completed");
				params.put("job_progress", "100");

				Thread.sleep(WAITING_TIME_FOR_INTERRUPT);

				// 상태를 업데이트 한다.
				monitorDAO.update("monitor.updateJobCompleted", params);

				log.debug("job_id=" + job_id + " Completed");

				// 전송완료이후 완료되었다는 메시지를 NPS로 보낸다.
				String task_id = job_option.substring(job_option.indexOf("=") + 1, job_option.indexOf(","));
				String type_code = job_option.substring(job_option.lastIndexOf("=") + 1);
				
				log.debug("task_id=" + task_id + ", type_code=" + type_code);

				SoapManager soapMgr = SoapManager.getInstance();
				soapMgr.requestTaskComplete(task_id, type_code);
			}

		} catch (InterruptedException e) {
			// Inprogress중 사용자에 의한 Cancel 작업시 Thread를 
			Map<String, Object> params = new HashMap();
			params.put("j_id", job_id);
			params.put("job_endtime", TcUtil.getCurrentTime());
			params.put("job_status", "Failed");
			params.put("metadata", errMsg);

			MonitorDAO monitorDAO = MonitorDAO.getInstance();
			monitorDAO.update("monitor.updateJobUncompleted", params);

			log.error("job_id=" + job_id + ", Failed");
			log.error(e.getMessage());
			e.printStackTrace();
		} catch (Exception e) {
			// 트랜스코딩 하다가 에러난 경우
			Map<String, Object> params = new HashMap();
			params.put("j_id", job_id);
			params.put("job_endtime", TcUtil.getCurrentTime());
			params.put("job_status", "Failed");
			params.put("metadata", errMsg);

			MonitorDAO monitorDAO = MonitorDAO.getInstance();
			monitorDAO.update("monitor.updateJobUncompleted", params);

			log.error("job_id=" + job_id + ", Failed");
			log.error(e.getMessage());
			e.printStackTrace();
		}

		// 파일이 다시 전 될수 있도록 목록에서 빼준다.
		ScheduledJobRunner.countDownProcessor(TYPE_TRANSFERRING);
		
		ScheduledJobRunner.removeActiveThread(job_id);
	}

}