package com.cha.transcoder.demon;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.scheduling.annotation.Scheduled;
import com.cha.transcoder.watchfolder.dao.WatchfolderDAO;

/**
 * 데이터베이스에 등록된 와치 폴더를 채크한다.
 */
@Service
public class WatchfolderManager {

	private Logger log = Logger.getLogger(WatchfolderManager.class);

	private static Hashtable htFolders = new Hashtable(10);

	@Resource(name = "watchfolderDAO")
	private WatchfolderDAO watchfolderDAO;

	public void WatchfolderManager() {
		log.debug("Constructor....");
	}

	@Scheduled(fixedDelay = 5000)
	public void scheduling() {
		 log.debug("Preparing watch folder.");

		Map<String, Object> map = new HashMap();
		map.put("enable_yn", "Y");

		try {
			List<Map<String, Object>> list = watchfolderDAO.selectEnableList(map);
			if (list == null) {
				log.debug("No watch folder.");
			} else {
				 log.debug("count of watchfolder=" + list.size());

				for (int i = 0; i < list.size(); i++) {
					Map<String, Object> map2 = list.get(i);

					String src_dir = (String) map2.get("source_directory");

					synchronized (htFolders) {
						if (!htFolders.contains(src_dir)) {
							log.debug("Watching '" + src_dir + "'");

							Path dir = Paths.get(src_dir);

							ThreadSourceFolderWatcher trd = new ThreadSourceFolderWatcher(dir);
							htFolders.put(src_dir, src_dir);

							Thread trdRunner = new Thread(trd);
							trdRunner.start();

							log.debug("Thread started.");
						}
					}
				}
				// log.debug("Done");
			}
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
		}

		// Watchfolder로 들어온 파일을 DB에 작업으로 등록한다.
//		SourceFolderWatcher.registerJobs();
	}
}

class ThreadSourceFolderWatcher implements Runnable {
	private Logger log = Logger.getLogger(ThreadSourceFolderWatcher.class);

	private SourceFolderWatcher sfWatcher = null;

	public ThreadSourceFolderWatcher(Path dir) {
		try {
			sfWatcher = new SourceFolderWatcher(dir, true);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public SourceFolderWatcher getWatcher() {
		return sfWatcher;
	}

	public void run() {
		log.debug("Running..........");
		sfWatcher.processEvents();
	}

	// Java 7 에서는 WatchService 가 Mac에서 안됨..
	// 대안으로 JNotify 가 있으나 MAC OS 10.7 에서 안됨.
	// 
	// private MacWatcher sfWatcher = null;
	//
	// public ThreadSourceFolderWatcher(Path dir) {
	// log.debug("Constructor");
	// sfWatcher = new MacWatcher();
	// }
	//
	// public void run() {
	// log.debug("Running.....");
	// sfWatcher.addWatch("/usr/local/data/in");
	// }
}
